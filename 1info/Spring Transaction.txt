########################################################
############ Spring transaction                   ###### 
########################################################
Spring declarative transaction management addresses these concerns by using Aspect Oriented Programming to achieve loose coupling and avoid boiler-plate code in our application.
Spring 3.1 introduces the @EnableTransactionManagement annotation to be used in on @Configuration classes and enable transactional support.
	@Configuration
	@EnableTransactionManagement
	public class PersistenceJPAConfig{
	 
	   @Bean
	   public LocalContainerEntityManagerFactoryBean  entityManagerFactoryBean(){
		  //...
	   }
	 
	   @Bean
	   public PlatformTransactionManager transactionManager(){
		  JpaTransactionManager transactionManager = new JpaTransactionManager();
		  transactionManager.setEntityManagerFactory( entityManagerFactoryBean().getObject() );
		  return transactionManager;
	   }
	}
only public methods should be annotated with @Transactional
	@Transactional
	public void businessLogic() {
	... use entity manager inside a transaction ...
	}
You can change transaction isolation level – as follows
	@Transactional(isolation = Isolation.SERIALIZABLE)
	Note that this has actually been introduced in Spring 4.1
	Isolation.READ_COMMITTED is default isolation level, so it only prevents dirty reads.
	READ_UNCOMMITTED
	READ_COMMITTED prevents Dirty Reads
	REPEATABLE_READ prevents Dirty Reads and Non-Repeatable Reads
	SERIALIZABLE prevents Dirty Reads, Non-Repeatable Reads and Phantom Read

Dirty Reads
-----------------
A> modifys R not commited
B> reads R
A>roll backs R
Non-Repeatable Reads
--------------------
A> reads R
B> modifs R and commits R
A> reads R( we get diff value)
Phantom Read
--------------
A> reads ange of R's
B>inserts new R in same region and commits
A>reads again same region( we get new records)

propagation
-----------------------
@Transactional(propagation=Propagation.REQUIRED)
the default propagational behavior is REQUIRED
Other options are REQUIRES_NEW, MANDATORY, SUPPORTS, NOT_SUPPORTED, NEVER, and NESTED.

org.springframework.jdbc.datasource.DataSourceTransactionManager
org.springframework.orm.hibernate3.HibernateTransactionManager
org.springframework.orm.jpa.JpaTransactionManager

JDBC transaction
------------------------
<bean id="tjtJTransactionManager"
  class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
  scope="singleton">
  <property name="dataSource" ref="tjtDataSource" />
</bean>
<tx:annotation-driven transaction-manager="tjtJTransactionManager" />

  @Transactional("tjtJTransactionManager")
  public void save(final String value) {
    dao.insert("T1", value);
  }
JPA
---------------------------------
<bean id="txManager" class="org.springframework.orm.jpa.JpaTransactionManager">
   <property name="entityManagerFactory" ref="myEmf" />
</bean>
<tx:annotation-driven transaction-manager="txManager" />
@Service
@Transactional
public class FooService {
    //...
} 
Hibernate
---------------------------------
  <bean id="transactionManager"
    class="org.springframework.orm.hibernate4.HibernateTransactionManager" 
    p:sessionFactory-ref="sessionFactory">
  </bean>



--------------------------------------------------
Global transactions
Global transactions enable you to work with multiple transactional resources, typically relational databases and message queues. The application server manages global transactions through the JTA, which is a cumbersome API to use (partly due to its exception model). Furthermore, a JTA UserTransaction normally needs to be sourced from JNDI, meaning that you also need to use JNDI in order to use JTA. Obviously the use of global transactions would limit any potential reuse of application code, as JTA is normally only available in an application server environment.
The significant downside is that CMT is tied to JTA and an application server environment.

Local transactions are resource-specific, such as a transaction associated with a JDBC connection. Local transactions may be easier to use, but have significant disadvantages: they cannot work across multiple transactional resources. 

you do not need an application server simply for declarative transactions through EJBs. Typically you need an application server’s JTA capability only if your application needs to handle transactions across multiple resources, which is not a requirement for many applications. 

The Spring Framework provides both declarative and programmatic transaction management. Most users prefer declarative transaction management, which is recommended in most cases.
With programmatic transaction management, developers work with the Spring Framework transaction abstraction, which can run over any underlying transaction infrastructure. With the preferred declarative model, developers typically write little or no code related to transaction management, and hence do not depend on the Spring Framework transaction API, or any other transaction API.
Transactional code can be tested much more easily than if it used JTA directly.
the TransactionException that can be thrown by any of the PlatformTransactionManager interface’s methods is unchecked
public interface PlatformTransactionManager {
	TransactionStatus getTransaction( TransactionDefinition definition) throws TransactionException;
	void commit(TransactionStatus status) throws TransactionException;
	void rollback(TransactionStatus status) throws TransactionException;
}
The getTransaction(..) method returns a TransactionStatus object, depending on a TransactionDefinition parameter. The returned TransactionStatus might represent a new transaction, or can represent an existing transaction if a matching transaction exists in the current call stack.
The TransactionStatus interface provides a simple way for transactional code to control transaction execution and query transaction status.
public interface TransactionStatus extends SavepointManager {
	boolean isNewTransaction();
	boolean hasSavepoint();
	void setRollbackOnly();
	boolean isRollbackOnly();
	void flush();
	boolean isCompleted();
}
PlatformTransactionManager implementations normally require knowledge of the environment in which they work: JDBC, JTA, Hibernate, and so on.
a local PlatformTransactionManager implementation example for JDBC
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	<property name="driverClassName" value="${jdbc.driverClassName}" />
	<property name="url" value="${jdbc.url}" />
	<property name="username" value="${jdbc.username}" />
	<property name="password" value="${jdbc.password}" />
</bean>
<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<property name="dataSource" ref="dataSource"/>
</bean>
If you use JTA in a Java EE container then you use a container DataSource, obtained through JNDI, in conjunction with Spring’s JtaTransactionManager.
	<jee:jndi-lookup id="dataSource" jndi-name="jdbc/jpetstore"/>
	<bean id="txManager" class="org.springframework.transaction.jta.JtaTransactionManager" />
The JtaTransactionManager does not need to know about the DataSource, or any other specific resources, because it uses the container’s global transaction management infrastructure.
You can also use Hibernate local transactions easily. The txManager bean in this case is of the HibernateTransactionManager type. In the same way as the DataSourceTransactionManager needs a reference to the DataSource, the HibernateTransactionManager needs a reference to the SessionFactory.
<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
	<property name="dataSource" ref="dataSource" />
	<property name="mappingResources">
	<list>
	<value>org/springframework/samples/petclinic/hibernate/petclinic.hbm.xml</value>
	</list>
	</property>
	<property name="hibernateProperties">
	<value>
	hibernate.dialect=${hibernate.dialect}
	</value>
	</property>
</bean>
<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
	<property name="sessionFactory" ref="sessionFactory" />
</bean>
If you are using Hibernate and Java EE container-managed JTA transactions, then you should simply use the same JtaTransactionManager as in the previous JTA example for JDBC.
<bean id="txManager" class="org.springframework.transaction.jta.JtaTransactionManager"/>